import{S as Io,i as Ao,s as Mo,e as p,t,k as i,c as o,a as c,h as e,d as s,m as r,b as k,g as u,H as a,E as Je}from"../../../chunks/index-2dbaace3.js";function Ro(po){let D,N,Ca,j,Pa,Oa,vs,y,q,Da,Ia,mn,Aa,Ma,Mn,Ra,Ba,Rn,Ta,Ha,_s,I,xa,fn,La,Wa,Es,Y,z,Ga,U,Na,ja,bs,dn,qa,gs,yn,Ya,Ss,K,oo=`<code class="language-bash">cargo new bevy_run_tutorial
<span class="token builtin class-name">cd</span> bevy_run_tutorial

cargo run</code>`,Cs,V,za,Ps,wn,Ua,Os,Q,Ka,Ds,A,Va,Bn,Qa,Ja,Is,J,co=`<code class="language-toml">// <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">bevy</span> <span class="token punctuation">=</span> <span class="token string">"0.6.1"</span>
<span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">"0.8"</span>
<span class="token key property">bevy-inspector-egui</span> <span class="token punctuation">=</span> <span class="token string">"0.9"</span></code>`,As,h,Fa,Tn,Xa,Za,Hn,$a,nt,Ms,M,st,xn,at,tt,Rs,F,lo=`<code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">bevy<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add_plugins</span><span class="token punctuation">(</span><span class="token class-name">DefaultPlugins</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Bs,R,et,Ln,pt,ot,Ts,hn,ct,Hs,B,lt,Wn,ut,it,xs,X,uo=`<code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">bevy<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token class-name">Color</span><span class="token punctuation">;</span>

<span class="token comment">// Dimensions</span>
<span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">WINDOW_WIDTH</span><span class="token punctuation">:</span> <span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">720</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">WINDOW_HEIGHT</span><span class="token punctuation">:</span> <span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">420</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

<span class="token comment">// Colors</span>
<span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">BG_COLOR</span><span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">::</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">.</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">.</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">.</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">PLAYER_COLOR</span><span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">::</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">.</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">228</span><span class="token punctuation">.</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">.</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">ENEMY_COLOR</span><span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">::</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">.</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">.</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">.</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ls,T,rt,Gn,kt,mt,Ws,Z,io=`<code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">bevy<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">mod</span> <span class="token module-declaration namespace">constants</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">constants<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Window setup</span>
  app
    <span class="token punctuation">.</span><span class="token function">insert_resource</span><span class="token punctuation">(</span><span class="token class-name">ClearColor</span><span class="token punctuation">(</span><span class="token constant">BG_COLOR</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">insert_resource</span><span class="token punctuation">(</span><span class="token class-name">WindowDescriptor</span> <span class="token punctuation">&#123;</span>
      title<span class="token punctuation">:</span> <span class="token string">"Run Rust!"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      width<span class="token punctuation">:</span> <span class="token constant">WINDOW_WIDTH</span><span class="token punctuation">,</span>
      height<span class="token punctuation">:</span> <span class="token constant">WINDOW_HEIGHT</span><span class="token punctuation">,</span>
      <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// Bevy default plugins</span>
    <span class="token punctuation">.</span><span class="token function">add_plugins</span><span class="token punctuation">(</span><span class="token class-name">DefaultPlugins</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Startup system (cameras)</span>
  app<span class="token punctuation">.</span><span class="token function">add_startup_system</span><span class="token punctuation">(</span>camera_setup<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Run the app</span>
  app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">fn</span> <span class="token function-definition function">camera_setup</span><span class="token punctuation">(</span><span class="token keyword">mut</span> commands<span class="token punctuation">:</span> <span class="token class-name">Commands</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 2D orthographic camera</span>
  commands<span class="token punctuation">.</span><span class="token function">spawn_bundle</span><span class="token punctuation">(</span><span class="token class-name">OrthographicCameraBundle</span><span class="token punctuation">::</span><span class="token function">new_2d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// UI Camera</span>
  commands<span class="token punctuation">.</span><span class="token function">spawn_bundle</span><span class="token punctuation">(</span><span class="token class-name">UiCameraBundle</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Gs,v,ft,Nn,dt,yt,$,wt,ht,Ns,vn,vt,js,m,_t,jn,Et,bt,nn,gt,St,qn,Ct,Pt,Yn,Ot,Dt,sn,It,At,zn,Mt,Rt,an,Bt,Tt,Un,Ht,xt,qs,_,Lt,Kn,Wt,Gt,Vn,Nt,jt,Ys,tn,ro=`<code class="language-rust"><span class="token comment">// constants.rs</span>

<span class="token comment">//...</span>

<span class="token attribute attr-name">#[derive(Debug, Clone, Eq, PartialEq, Hash)]</span>
<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">AppState</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">Menu</span><span class="token punctuation">,</span>
  <span class="token class-name">InGame</span><span class="token punctuation">,</span>
  <span class="token class-name">GameOver</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//...</span></code>`,zs,E,qt,Qn,Yt,zt,Jn,Ut,Kt,Us,en,ko=`<code class="language-rust"><span class="token comment">// just example code</span>
<span class="token keyword">fn</span> <span class="token function-definition function">some_game_system</span><span class="token punctuation">(</span><span class="token keyword">mut</span> state<span class="token punctuation">:</span> <span class="token class-name">ResMut</span><span class="token operator">&lt;</span><span class="token class-name">State</span><span class="token operator">&lt;</span><span class="token class-name">AppState</span><span class="token operator">>></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>has_just_died<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    state<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">AppState</span><span class="token punctuation">::</span><span class="token class-name">GameOver</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ks,b,Vt,Fn,Qt,Jt,Xn,Ft,Xt,Vs,pn,mo=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  app
    <span class="token comment">// just example code</span>
    <span class="token punctuation">.</span><span class="token function">add_system_set</span><span class="token punctuation">(</span><span class="token class-name">SystemSet</span><span class="token punctuation">::</span><span class="token function">on_enter</span><span class="token punctuation">(</span><span class="token class-name">AppState</span><span class="token punctuation">::</span><span class="token class-name">Menu</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_system</span><span class="token punctuation">(</span>setup_menu<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add_system_set</span><span class="token punctuation">(</span><span class="token class-name">SystemSet</span><span class="token punctuation">::</span><span class="token function">on_update</span><span class="token punctuation">(</span><span class="token class-name">AppState</span><span class="token punctuation">::</span><span class="token class-name">Menu</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_system</span><span class="token punctuation">(</span>update_menu<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add_system_set</span><span class="token punctuation">(</span><span class="token class-name">SystemSet</span><span class="token punctuation">::</span><span class="token function">on_exit</span><span class="token punctuation">(</span><span class="token class-name">AppState</span><span class="token punctuation">::</span><span class="token class-name">Menu</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_system</span><span class="token punctuation">(</span>teardown_state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Qs,H,Zt,Zn,$t,ne,Js,x,se,$n,ae,te,Fs,on,fo=`<code class="language-rust"><span class="token comment">// main.rs</span>

<span class="token comment">// ..</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">teardown_state</span><span class="token punctuation">(</span>
  <span class="token keyword">mut</span> commands<span class="token punctuation">:</span> <span class="token class-name">Commands</span><span class="token punctuation">,</span>
  entities<span class="token punctuation">:</span> <span class="token class-name">Query</span><span class="token operator">&lt;</span><span class="token class-name">Entity</span><span class="token punctuation">,</span> <span class="token class-name">Without</span><span class="token operator">&lt;</span><span class="token class-name">Camera</span><span class="token operator">>></span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> entity <span class="token keyword">in</span> entities<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    commands<span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">despawn_recursive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Xs,d,ee,ns,pe,oe,ss,ce,le,as,ue,ie,ts,re,ke,es,me,fe,Zs,_n,de,$s,L,ye,ps,we,he,na,g,os,cs,ve,_e,ls,us,Ee,be,is,rs,ge,sa,S,Se,En,Ce,Pe,ks,Oe,De,aa,C,Ie,ms,Ae,Me,fs,Re,Be,ta,cn,Te,ds,He,ea,ln,yo=`<code class="language-rust"><span class="token comment">// src/main_menu/mod.rs</span>

<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MainMenuPlugin</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span> <span class="token class-name">Plugin</span> <span class="token keyword">for</span> <span class="token class-name">MainMenuPlugin</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">build</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> app<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">App</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    app
      <span class="token punctuation">.</span><span class="token function">add_system_set</span><span class="token punctuation">(</span><span class="token class-name">SystemSet</span><span class="token punctuation">::</span><span class="token function">on_enter</span><span class="token punctuation">(</span><span class="token class-name">AppState</span><span class="token punctuation">::</span><span class="token class-name">Menu</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_system</span><span class="token punctuation">(</span>setup_menu_system<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add_system_set</span><span class="token punctuation">(</span><span class="token class-name">SystemSet</span><span class="token punctuation">::</span><span class="token function">on_update</span><span class="token punctuation">(</span><span class="token class-name">AppState</span><span class="token punctuation">::</span><span class="token class-name">Menu</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_system</span><span class="token punctuation">(</span>update_menu_system<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add_system_set</span><span class="token punctuation">(</span><span class="token class-name">SystemSet</span><span class="token punctuation">::</span><span class="token function">on_exit</span><span class="token punctuation">(</span><span class="token class-name">AppState</span><span class="token punctuation">::</span><span class="token class-name">Menu</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with_system</span><span class="token punctuation">(</span>teardown_state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">///</span>
<span class="token comment">/// Setup Main Menu</span>
<span class="token keyword">fn</span> <span class="token function-definition function">setup_menu_system</span><span class="token punctuation">(</span><span class="token keyword">mut</span> commands<span class="token punctuation">:</span> <span class="token class-name">Commands</span><span class="token punctuation">,</span> asset_server<span class="token punctuation">:</span> <span class="token class-name">Res</span><span class="token operator">&lt;</span><span class="token class-name">AssetServer</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Headline</span>
  commands<span class="token punctuation">.</span><span class="token function">spawn_bundle</span><span class="token punctuation">(</span><span class="token class-name">TextBundle</span> <span class="token punctuation">&#123;</span>
    style<span class="token punctuation">:</span> <span class="token class-name">Style</span> <span class="token punctuation">&#123;</span>
      position_type<span class="token punctuation">:</span> <span class="token class-name">PositionType</span><span class="token punctuation">::</span><span class="token class-name">Absolute</span><span class="token punctuation">,</span>
      position<span class="token punctuation">:</span> <span class="token class-name">Rect</span> <span class="token punctuation">&#123;</span>
        top<span class="token punctuation">:</span> <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Px</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        left<span class="token punctuation">:</span> <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Px</span><span class="token punctuation">(</span><span class="token number">24.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    text<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">::</span><span class="token function">with_section</span><span class="token punctuation">(</span>
      <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Run in Rust"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">TextStyle</span> <span class="token punctuation">&#123;</span>
        font<span class="token punctuation">:</span> asset_server<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"fonts/Efforts.ttf"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        font_size<span class="token punctuation">:</span> <span class="token number">64.0</span><span class="token punctuation">,</span>
        color<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">::</span><span class="token constant">WHITE</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token class-name">TextAlignment</span> <span class="token punctuation">&#123;</span>
        horizontal<span class="token punctuation">:</span> <span class="token class-name">HorizontalAlign</span><span class="token punctuation">::</span><span class="token class-name">Center</span><span class="token punctuation">,</span>
        vertical<span class="token punctuation">:</span> <span class="token class-name">VerticalAlign</span><span class="token punctuation">::</span><span class="token class-name">Center</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">///</span>
<span class="token comment">/// Update Main Menu</span>
<span class="token keyword">fn</span> <span class="token function-definition function">update_menu_system</span><span class="token punctuation">(</span><span class="token keyword">mut</span> state<span class="token punctuation">:</span> <span class="token class-name">ResMut</span><span class="token operator">&lt;</span><span class="token class-name">State</span><span class="token operator">&lt;</span><span class="token class-name">AppState</span><span class="token operator">>></span><span class="token punctuation">,</span> keyboard_input<span class="token punctuation">:</span> <span class="token class-name">Res</span><span class="token operator">&lt;</span><span class="token class-name">Input</span><span class="token operator">&lt;</span><span class="token class-name">KeyCode</span><span class="token operator">>></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> keyboard_input<span class="token punctuation">.</span><span class="token function">just_released</span><span class="token punctuation">(</span><span class="token class-name">KeyCode</span><span class="token punctuation">::</span><span class="token class-name">Space</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    state<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">AppState</span><span class="token punctuation">::</span><span class="token class-name">InGame</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,pa,W,xe,ys,Le,We,oa,G,Ge,ws,Ne,je,ca,un,wo=`<code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">bevy<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">mod</span> <span class="token module-declaration namespace">constants</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">constants<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token comment">///</span>
<span class="token comment">/// State Plugins</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">main_menu</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">main_menu<span class="token punctuation">::</span></span><span class="token class-name">MainMenuPlugin</span><span class="token punctuation">;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">game</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">game<span class="token punctuation">::</span></span><span class="token class-name">GamePlugin</span><span class="token punctuation">;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">game_over</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">game_over<span class="token punctuation">::</span></span><span class="token class-name">GameOverPlugin</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Window setup</span>
  app
    <span class="token punctuation">.</span><span class="token function">insert_resource</span><span class="token punctuation">(</span><span class="token class-name">ClearColor</span><span class="token punctuation">(</span><span class="token constant">BG_COLOR</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">insert_resource</span><span class="token punctuation">(</span><span class="token class-name">WindowDescriptor</span> <span class="token punctuation">&#123;</span>
      title<span class="token punctuation">:</span> <span class="token string">"Run Rust!"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      width<span class="token punctuation">:</span> <span class="token constant">WINDOW_WIDTH</span><span class="token punctuation">,</span>
      height<span class="token punctuation">:</span> <span class="token constant">WINDOW_HEIGHT</span><span class="token punctuation">,</span>
      <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// Bevy default plugins</span>
    <span class="token punctuation">.</span><span class="token function">add_plugins</span><span class="token punctuation">(</span><span class="token class-name">DefaultPlugins</span><span class="token punctuation">)</span>
    <span class="token comment">// States</span>
    <span class="token punctuation">.</span><span class="token function">add_plugin</span><span class="token punctuation">(</span><span class="token class-name">MainMenuPlugin</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add_plugin</span><span class="token punctuation">(</span><span class="token class-name">GamePlugin</span><span class="token punctuation">)</span>

    <span class="token punctuation">.</span><span class="token function">add_state</span><span class="token punctuation">(</span><span class="token class-name">AppState</span><span class="token punctuation">::</span><span class="token class-name">Menu</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This is the state we start in!</span>
  <span class="token comment">// ...</span></code>`,la,bn,qe,ua,P,hs,Ye,ze,rn,Ue,kn,Ke,Ve;return{c(){D=p("blockquote"),N=p("p"),Ca=t("Check out the "),j=p("a"),Pa=t("source code"),Oa=t("! You can run/inspect both, the end result and the code for this post. I suggest to keep it handy while reading."),vs=i(),y=p("p"),q=p("a"),Da=t("Bevy"),Ia=t(" is a "),mn=p("span"),Aa=t("data-driven game engine"),Ma=t(" for Rust. It provides a fully custom "),Mn=p("em"),Ra=t("ECS"),Ba=t(" - Entity Component System - a popular design-pattern in games. Pretty much like MVC "),Rn=p("s"),Ta=t("is"),Ha=t(" was a popular design-pattern for Web-Applications."),_s=i(),I=p("p"),xa=t("It helps to have some prior game-dev experience. Especially if your project grows in size and complexity, the ECS-approach helps (and forces you) to keep your code lean and decoupled while also giving you ways to "),fn=p("span"),La=t("compose"),Wa=t(" functionality across different Entities."),Es=i(),Y=p("blockquote"),z=p("p"),Ga=t("In order to follow this tutorial you will need to "),U=p("a"),Na=t("get setup"),ja=t(" with Rust and at least be able to run your very first example `hello world` code!"),bs=i(),dn=p("h2"),qa=t("Create a new project"),gs=i(),yn=p("p"),Ya=t("If you have gone thrugh Rust\u2019s installation, you know that creating a new project is just one command away:"),Ss=i(),K=p("pre"),Cs=i(),V=p("span"),za=t("Cargo"),Ps=t(" for Rust is "),wn=p("i"),Ua=t("kind of"),Os=t(" like "),Q=p("span"),Ka=t("npm"),Ds=t(` for Node. You can just add dependencies to your cargo file and they will get installed automatically.
`),A=p("p"),Va=t("Go ahead, and edit your "),Bn=p("code"),Qa=t("Cargo.toml"),Ja=t(" dependencies as follows:"),Is=i(),J=p("pre"),As=i(),h=p("p"),Fa=t("Just by adding these few lines, we now have access to all of Bevy\u2019s features. "),Tn=p("code"),Xa=t("rand"),Za=t(" is a library to help us with random number generation and "),Hn=p("code"),$a=t("bevy-inspector-egui"),nt=t(" is a very useful debugging-tool as it shows you what entities are present within your ecs."),Ms=i(),M=p("p"),st=t("Let\u2019s edit "),xn=p("code"),at=t("src/main.rs"),tt=t(" to actually use some Bevy features:"),Rs=i(),F=p("pre"),Bs=i(),R=p("p"),et=t("You should now "),Ln=p("code"),pt=t("cargo run"),ot=t(" your project and confirm everything was done correctly. It will probably take a while on your first go, subsequent runs will be faster, once the dependencies are installed."),Ts=i(),hn=p("h2"),ct=t("Making a window"),Hs=i(),B=p("p"),lt=t("Let\u2019s setup some constants for our game first! Create "),Wn=p("code"),ut=t("src/constants.rs"),it=t(" and enter the following:"),xs=i(),X=p("pre"),Ls=i(),T=p("p"),rt=t("And in your "),Gn=p("code"),kt=t("main.rs"),mt=t(":"),Ws=i(),Z=p("pre"),Gs=i(),v=p("p"),ft=t("This code should spawn a "),Nn=p("code"),dt=t("720 x 420"),yt=t(" window with a title and two cameras. Pretty much \u201Cstandard\u201D bevy setup code - if this seems too daunting right now, you might want to go through "),$=p("a"),wt=t("bevy\u2019s own getting started guide"),ht=t(" to get comfortable with the basics first."),Ns=i(),vn=p("h2"),vt=t("Changing \u201CScreens\u201D"),js=i(),m=p("p"),_t=t("Pretty much in any game I have ever "),jn=p("em"),Et=t("tried"),bt=t(" to make I needed some way to go from one \u201Cscreen\u201D to another. In "),nn=p("a"),gt=t("Godot"),St=t(" you can implement a "),qn=p("code"),Ct=t("SceneManager"),Pt=t(" that will transition from one "),Yn=p("code"),Ot=t("Node"),Dt=t(" to another. "),sn=p("a"),It=t("Unity"),At=t(" has "),zn=p("code"),Mt=t("Scenes"),Rt=t(" and "),an=p("a"),Bt=t("GameMaker"),Tt=t(" has "),Un=p("code"),Ht=t("rooms"),xt=t(" - but they all do very similar things for your game."),qs=i(),_=p("p"),Lt=t("In Bevy, we can create an "),Kn=p("code"),Wt=t("enum AppState"),Gt=t(" to help us keep track of \u201Cwhere we are\u201D in our game. We only need three in total (for now) - "),Vn=p("code"),Nt=t("Menu, InGame & GameOver"),jt=t("."),Ys=i(),tn=p("pre"),zs=i(),E=p("p"),qt=t("Now the fun part! Bevy-\u201DSystems\u201D are just Rust-functions, "),Qn=p("em"),Yt=t("but"),zt=t(" you can \u201Cquery\u201D for all kinds of game-resources by just defining the function signature. So in any system that needs to change the "),Jn=p("code"),Ut=t("AppState"),Kt=t(", like when the player has died and we want to enter the GameOver state, we can define it as such:"),Us=i(),en=p("pre"),Ks=i(),b=p("p"),Vt=t("Now we need to tell Bevy what systems to run depending on our "),Fn=p("code"),Qt=t("AppState"),Jt=t(". In your "),Xn=p("code"),Ft=t("main.rs"),Xt=t(" you could add these lines to the bottom of your AppBuilder-chain:"),Vs=i(),pn=p("pre"),Qs=i(),H=p("p"),Zt=t("As you can see, "),Zn=p("code"),$t=t("SystemSet"),ne=t(" provides useful \u201CLifecycle-Hooks\u201D so you can run different systems when you enter/exit the AppState as well!"),Js=i(),x=p("p"),se=t("One thing we actually need, is the "),$n=p("code"),ae=t("teardown_state"),te=t(" function - our first system!"),Fs=i(),on=p("pre"),Xs=i(),d=p("p"),ee=t("The "),ns=p("code"),pe=t("teardown_state"),oe=t(" function will be used for all our "),ss=p("code"),ce=t("on_exit"),le=t(" state logic. Here you can see, we don\u2019t have to worry about "),as=p("i"),ue=t("supplying"),ie=t(" the correct parameters to call the function. Rather, we only have to "),ts=p("code"),re=t("define"),ke=t(" what parameters a "),es=p("s"),me=t("function"),fe=t(" system needs, and Bevy will take care of the rest. Also, it will try to be smart about how to run your code and try to optimize/cache queries - but that\u2019s above my skill level and beyond the scope of this post \u{1F605}."),Zs=i(),_n=p("h2"),de=t("Implementing States"),$s=i(),L=p("p"),ye=t("We are going to setup the structure right away - so go ahead and create three directories containing a "),ps=p("code"),we=t("mod.rs"),he=t(" which will be the \u201Centry-point\u201D of every Screen. One for each AppState:"),na=i(),g=p("ul"),os=p("li"),cs=p("code"),ve=t("game/mod.rs"),_e=i(),ls=p("li"),us=p("code"),Ee=t("main_menu/mod.rs"),be=i(),is=p("li"),rs=p("code"),ge=t("game_over/mod.rs"),sa=i(),S=p("p"),Se=t("Each of these are what\u2019s called a "),En=p("span"),Ce=t("Plugin"),Pe=t(" in Bevy. You can use plugins to organize your code. We are going to make "),ks=p("em"),Oe=t("every"),De=t(" AppState a Plugin, but you are free to get creative of course."),aa=i(),C=p("p"),Ie=t("Depending on your game you might even need a seperate "),ms=p("code"),Ae=t("DamagePlugin"),Me=t(" that can run multiple "),fs=p("code"),Re=t("DamageSystems"),Be=t(" in order to combine lots of different status effects and buffs with a singular blow."),ta=i(),cn=p("p"),Te=t("Let\u2019s start with the "),ds=p("code"),He=t("MainMenuPlugin"),ea=i(),ln=p("pre"),pa=i(),W=p("p"),xe=t("This is it! Our very first state. I think you can finish off the other states by yourself. You make it so that every screen has a different headline-text and have to press "),ys=p("code"),Le=t("Escape"),We=t(" to go back to the main menu."),oa=i(),G=p("p"),Ge=t("The last thing to do is to tell Bevy to use our new plugins. So in your "),ws=p("code"),Ne=t("main.rs"),je=t(":"),ca=i(),un=p("pre"),la=i(),bn=p("p"),qe=t("Thanks for sticking with me if you got this far. I hope I have provided some insight on how to get started with a new game in Bevy, and keep your code organized. In the next post, we will go over the actual game-code. How to spawn actual entities with components, player-input and enemies."),ua=i(),P=p("blockquote"),hs=p("span"),Ye=t("Disclaimer"),ze=i(),rn=p("p"),Ue=t("I'm no expert on Rust nor Bevy! If you have any feedback on how to improve, please reach out directly, or open issues/pull requests in "),kn=p("a"),Ke=t("on github"),Ve=t("."),this.h()},l(n){D=o(n,"BLOCKQUOTE",{});var l=c(D);N=o(l,"P",{});var ia=c(N);Ca=e(ia,"Check out the "),j=o(ia,"A",{href:!0,target:!0});var Fe=c(j);Pa=e(Fe,"source code"),Fe.forEach(s),Oa=e(ia,"! You can run/inspect both, the end result and the code for this post. I suggest to keep it handy while reading."),ia.forEach(s),l.forEach(s),vs=r(n),y=o(n,"P",{});var O=c(y);q=o(O,"A",{href:!0,rel:!0});var Xe=c(q);Da=e(Xe,"Bevy"),Xe.forEach(s),Ia=e(O," is a "),mn=o(O,"SPAN",{class:!0});var Ze=c(mn);Aa=e(Ze,"data-driven game engine"),Ze.forEach(s),Ma=e(O," for Rust. It provides a fully custom "),Mn=o(O,"EM",{});var $e=c(Mn);Ra=e($e,"ECS"),$e.forEach(s),Ba=e(O," - Entity Component System - a popular design-pattern in games. Pretty much like MVC "),Rn=o(O,"S",{});var np=c(Rn);Ta=e(np,"is"),np.forEach(s),Ha=e(O," was a popular design-pattern for Web-Applications."),O.forEach(s),_s=r(n),I=o(n,"P",{});var ra=c(I);xa=e(ra,"It helps to have some prior game-dev experience. Especially if your project grows in size and complexity, the ECS-approach helps (and forces you) to keep your code lean and decoupled while also giving you ways to "),fn=o(ra,"SPAN",{class:!0});var sp=c(fn);La=e(sp,"compose"),sp.forEach(s),Wa=e(ra," functionality across different Entities."),ra.forEach(s),Es=r(n),Y=o(n,"BLOCKQUOTE",{class:!0});var ap=c(Y);z=o(ap,"P",{});var ka=c(z);Ga=e(ka,"In order to follow this tutorial you will need to "),U=o(ka,"A",{href:!0,target:!0});var tp=c(U);Na=e(tp,"get setup"),tp.forEach(s),ja=e(ka," with Rust and at least be able to run your very first example `hello world` code!"),ka.forEach(s),ap.forEach(s),bs=r(n),dn=o(n,"H2",{});var ep=c(dn);qa=e(ep,"Create a new project"),ep.forEach(s),gs=r(n),yn=o(n,"P",{});var pp=c(yn);Ya=e(pp,"If you have gone thrugh Rust\u2019s installation, you know that creating a new project is just one command away:"),pp.forEach(s),Ss=r(n),K=o(n,"PRE",{class:!0});var ho=c(K);ho.forEach(s),Cs=r(n),V=o(n,"SPAN",{class:!0});var op=c(V);za=e(op,"Cargo"),op.forEach(s),Ps=e(n," for Rust is "),wn=o(n,"I",{});var cp=c(wn);Ua=e(cp,"kind of"),cp.forEach(s),Os=e(n," like "),Q=o(n,"SPAN",{class:!0});var lp=c(Q);Ka=e(lp,"npm"),lp.forEach(s),Ds=e(n,` for Node. You can just add dependencies to your cargo file and they will get installed automatically.
`),A=o(n,"P",{});var ma=c(A);Va=e(ma,"Go ahead, and edit your "),Bn=o(ma,"CODE",{});var up=c(Bn);Qa=e(up,"Cargo.toml"),up.forEach(s),Ja=e(ma," dependencies as follows:"),ma.forEach(s),Is=r(n),J=o(n,"PRE",{class:!0});var vo=c(J);vo.forEach(s),As=r(n),h=o(n,"P",{});var gn=c(h);Fa=e(gn,"Just by adding these few lines, we now have access to all of Bevy\u2019s features. "),Tn=o(gn,"CODE",{});var ip=c(Tn);Xa=e(ip,"rand"),ip.forEach(s),Za=e(gn," is a library to help us with random number generation and "),Hn=o(gn,"CODE",{});var rp=c(Hn);$a=e(rp,"bevy-inspector-egui"),rp.forEach(s),nt=e(gn," is a very useful debugging-tool as it shows you what entities are present within your ecs."),gn.forEach(s),Ms=r(n),M=o(n,"P",{});var fa=c(M);st=e(fa,"Let\u2019s edit "),xn=o(fa,"CODE",{});var kp=c(xn);at=e(kp,"src/main.rs"),kp.forEach(s),tt=e(fa," to actually use some Bevy features:"),fa.forEach(s),Rs=r(n),F=o(n,"PRE",{class:!0});var _o=c(F);_o.forEach(s),Bs=r(n),R=o(n,"P",{});var da=c(R);et=e(da,"You should now "),Ln=o(da,"CODE",{});var mp=c(Ln);pt=e(mp,"cargo run"),mp.forEach(s),ot=e(da," your project and confirm everything was done correctly. It will probably take a while on your first go, subsequent runs will be faster, once the dependencies are installed."),da.forEach(s),Ts=r(n),hn=o(n,"H2",{});var fp=c(hn);ct=e(fp,"Making a window"),fp.forEach(s),Hs=r(n),B=o(n,"P",{});var ya=c(B);lt=e(ya,"Let\u2019s setup some constants for our game first! Create "),Wn=o(ya,"CODE",{});var dp=c(Wn);ut=e(dp,"src/constants.rs"),dp.forEach(s),it=e(ya," and enter the following:"),ya.forEach(s),xs=r(n),X=o(n,"PRE",{class:!0});var Eo=c(X);Eo.forEach(s),Ls=r(n),T=o(n,"P",{});var wa=c(T);rt=e(wa,"And in your "),Gn=o(wa,"CODE",{});var yp=c(Gn);kt=e(yp,"main.rs"),yp.forEach(s),mt=e(wa,":"),wa.forEach(s),Ws=r(n),Z=o(n,"PRE",{class:!0});var bo=c(Z);bo.forEach(s),Gs=r(n),v=o(n,"P",{});var Sn=c(v);ft=e(Sn,"This code should spawn a "),Nn=o(Sn,"CODE",{});var wp=c(Nn);dt=e(wp,"720 x 420"),wp.forEach(s),yt=e(Sn," window with a title and two cameras. Pretty much \u201Cstandard\u201D bevy setup code - if this seems too daunting right now, you might want to go through "),$=o(Sn,"A",{href:!0,target:!0});var hp=c($);wt=e(hp,"bevy\u2019s own getting started guide"),hp.forEach(s),ht=e(Sn," to get comfortable with the basics first."),Sn.forEach(s),Ns=r(n),vn=o(n,"H2",{});var vp=c(vn);vt=e(vp,"Changing \u201CScreens\u201D"),vp.forEach(s),js=r(n),m=o(n,"P",{});var f=c(m);_t=e(f,"Pretty much in any game I have ever "),jn=o(f,"EM",{});var _p=c(jn);Et=e(_p,"tried"),_p.forEach(s),bt=e(f," to make I needed some way to go from one \u201Cscreen\u201D to another. In "),nn=o(f,"A",{href:!0,target:!0});var Ep=c(nn);gt=e(Ep,"Godot"),Ep.forEach(s),St=e(f," you can implement a "),qn=o(f,"CODE",{});var bp=c(qn);Ct=e(bp,"SceneManager"),bp.forEach(s),Pt=e(f," that will transition from one "),Yn=o(f,"CODE",{});var gp=c(Yn);Ot=e(gp,"Node"),gp.forEach(s),Dt=e(f," to another. "),sn=o(f,"A",{href:!0,target:!0});var Sp=c(sn);It=e(Sp,"Unity"),Sp.forEach(s),At=e(f," has "),zn=o(f,"CODE",{});var Cp=c(zn);Mt=e(Cp,"Scenes"),Cp.forEach(s),Rt=e(f," and "),an=o(f,"A",{href:!0,target:!0});var Pp=c(an);Bt=e(Pp,"GameMaker"),Pp.forEach(s),Tt=e(f," has "),Un=o(f,"CODE",{});var Op=c(Un);Ht=e(Op,"rooms"),Op.forEach(s),xt=e(f," - but they all do very similar things for your game."),f.forEach(s),qs=r(n),_=o(n,"P",{});var Cn=c(_);Lt=e(Cn,"In Bevy, we can create an "),Kn=o(Cn,"CODE",{});var Dp=c(Kn);Wt=e(Dp,"enum AppState"),Dp.forEach(s),Gt=e(Cn," to help us keep track of \u201Cwhere we are\u201D in our game. We only need three in total (for now) - "),Vn=o(Cn,"CODE",{});var Ip=c(Vn);Nt=e(Ip,"Menu, InGame & GameOver"),Ip.forEach(s),jt=e(Cn,"."),Cn.forEach(s),Ys=r(n),tn=o(n,"PRE",{class:!0});var go=c(tn);go.forEach(s),zs=r(n),E=o(n,"P",{});var Pn=c(E);qt=e(Pn,"Now the fun part! Bevy-\u201DSystems\u201D are just Rust-functions, "),Qn=o(Pn,"EM",{});var Ap=c(Qn);Yt=e(Ap,"but"),Ap.forEach(s),zt=e(Pn," you can \u201Cquery\u201D for all kinds of game-resources by just defining the function signature. So in any system that needs to change the "),Jn=o(Pn,"CODE",{});var Mp=c(Jn);Ut=e(Mp,"AppState"),Mp.forEach(s),Kt=e(Pn,", like when the player has died and we want to enter the GameOver state, we can define it as such:"),Pn.forEach(s),Us=r(n),en=o(n,"PRE",{class:!0});var So=c(en);So.forEach(s),Ks=r(n),b=o(n,"P",{});var On=c(b);Vt=e(On,"Now we need to tell Bevy what systems to run depending on our "),Fn=o(On,"CODE",{});var Rp=c(Fn);Qt=e(Rp,"AppState"),Rp.forEach(s),Jt=e(On,". In your "),Xn=o(On,"CODE",{});var Bp=c(Xn);Ft=e(Bp,"main.rs"),Bp.forEach(s),Xt=e(On," you could add these lines to the bottom of your AppBuilder-chain:"),On.forEach(s),Vs=r(n),pn=o(n,"PRE",{class:!0});var Co=c(pn);Co.forEach(s),Qs=r(n),H=o(n,"P",{});var ha=c(H);Zt=e(ha,"As you can see, "),Zn=o(ha,"CODE",{});var Tp=c(Zn);$t=e(Tp,"SystemSet"),Tp.forEach(s),ne=e(ha," provides useful \u201CLifecycle-Hooks\u201D so you can run different systems when you enter/exit the AppState as well!"),ha.forEach(s),Js=r(n),x=o(n,"P",{});var va=c(x);se=e(va,"One thing we actually need, is the "),$n=o(va,"CODE",{});var Hp=c($n);ae=e(Hp,"teardown_state"),Hp.forEach(s),te=e(va," function - our first system!"),va.forEach(s),Fs=r(n),on=o(n,"PRE",{class:!0});var Po=c(on);Po.forEach(s),Xs=r(n),d=o(n,"P",{});var w=c(d);ee=e(w,"The "),ns=o(w,"CODE",{});var xp=c(ns);pe=e(xp,"teardown_state"),xp.forEach(s),oe=e(w," function will be used for all our "),ss=o(w,"CODE",{});var Lp=c(ss);ce=e(Lp,"on_exit"),Lp.forEach(s),le=e(w," state logic. Here you can see, we don\u2019t have to worry about "),as=o(w,"I",{});var Wp=c(as);ue=e(Wp,"supplying"),Wp.forEach(s),ie=e(w," the correct parameters to call the function. Rather, we only have to "),ts=o(w,"CODE",{});var Gp=c(ts);re=e(Gp,"define"),Gp.forEach(s),ke=e(w," what parameters a "),es=o(w,"S",{});var Np=c(es);me=e(Np,"function"),Np.forEach(s),fe=e(w," system needs, and Bevy will take care of the rest. Also, it will try to be smart about how to run your code and try to optimize/cache queries - but that\u2019s above my skill level and beyond the scope of this post \u{1F605}."),w.forEach(s),Zs=r(n),_n=o(n,"H2",{});var jp=c(_n);de=e(jp,"Implementing States"),jp.forEach(s),$s=r(n),L=o(n,"P",{});var _a=c(L);ye=e(_a,"We are going to setup the structure right away - so go ahead and create three directories containing a "),ps=o(_a,"CODE",{});var qp=c(ps);we=e(qp,"mod.rs"),qp.forEach(s),he=e(_a," which will be the \u201Centry-point\u201D of every Screen. One for each AppState:"),_a.forEach(s),na=r(n),g=o(n,"UL",{});var Dn=c(g);os=o(Dn,"LI",{});var Yp=c(os);cs=o(Yp,"CODE",{});var zp=c(cs);ve=e(zp,"game/mod.rs"),zp.forEach(s),Yp.forEach(s),_e=r(Dn),ls=o(Dn,"LI",{});var Up=c(ls);us=o(Up,"CODE",{});var Kp=c(us);Ee=e(Kp,"main_menu/mod.rs"),Kp.forEach(s),Up.forEach(s),be=r(Dn),is=o(Dn,"LI",{});var Vp=c(is);rs=o(Vp,"CODE",{});var Qp=c(rs);ge=e(Qp,"game_over/mod.rs"),Qp.forEach(s),Vp.forEach(s),Dn.forEach(s),sa=r(n),S=o(n,"P",{});var In=c(S);Se=e(In,"Each of these are what\u2019s called a "),En=o(In,"SPAN",{class:!0});var Jp=c(En);Ce=e(Jp,"Plugin"),Jp.forEach(s),Pe=e(In," in Bevy. You can use plugins to organize your code. We are going to make "),ks=o(In,"EM",{});var Fp=c(ks);Oe=e(Fp,"every"),Fp.forEach(s),De=e(In," AppState a Plugin, but you are free to get creative of course."),In.forEach(s),aa=r(n),C=o(n,"P",{});var An=c(C);Ie=e(An,"Depending on your game you might even need a seperate "),ms=o(An,"CODE",{});var Xp=c(ms);Ae=e(Xp,"DamagePlugin"),Xp.forEach(s),Me=e(An," that can run multiple "),fs=o(An,"CODE",{});var Zp=c(fs);Re=e(Zp,"DamageSystems"),Zp.forEach(s),Be=e(An," in order to combine lots of different status effects and buffs with a singular blow."),An.forEach(s),ta=r(n),cn=o(n,"P",{});var Qe=c(cn);Te=e(Qe,"Let\u2019s start with the "),ds=o(Qe,"CODE",{});var $p=c(ds);He=e($p,"MainMenuPlugin"),$p.forEach(s),Qe.forEach(s),ea=r(n),ln=o(n,"PRE",{class:!0});var Oo=c(ln);Oo.forEach(s),pa=r(n),W=o(n,"P",{});var Ea=c(W);xe=e(Ea,"This is it! Our very first state. I think you can finish off the other states by yourself. You make it so that every screen has a different headline-text and have to press "),ys=o(Ea,"CODE",{});var no=c(ys);Le=e(no,"Escape"),no.forEach(s),We=e(Ea," to go back to the main menu."),Ea.forEach(s),oa=r(n),G=o(n,"P",{});var ba=c(G);Ge=e(ba,"The last thing to do is to tell Bevy to use our new plugins. So in your "),ws=o(ba,"CODE",{});var so=c(ws);Ne=e(so,"main.rs"),so.forEach(s),je=e(ba,":"),ba.forEach(s),ca=r(n),un=o(n,"PRE",{class:!0});var Do=c(un);Do.forEach(s),la=r(n),bn=o(n,"P",{});var ao=c(bn);qe=e(ao,"Thanks for sticking with me if you got this far. I hope I have provided some insight on how to get started with a new game in Bevy, and keep your code organized. In the next post, we will go over the actual game-code. How to spawn actual entities with components, player-input and enemies."),ao.forEach(s),ua=r(n),P=o(n,"BLOCKQUOTE",{class:!0});var ga=c(P);hs=o(ga,"SPAN",{});var to=c(hs);Ye=e(to,"Disclaimer"),to.forEach(s),ze=r(ga),rn=o(ga,"P",{});var Sa=c(rn);Ue=e(Sa,"I'm no expert on Rust nor Bevy! If you have any feedback on how to improve, please reach out directly, or open issues/pull requests in "),kn=o(Sa,"A",{href:!0,target:!0});var eo=c(kn);Ke=e(eo,"on github"),eo.forEach(s),Ve=e(Sa,"."),Sa.forEach(s),ga.forEach(s),this.h()},h(){k(j,"href","https://github.com/DennisSmuda/run_bevy_tutorial"),k(j,"target","_blank"),k(q,"href","https://bevyengine.org/"),k(q,"rel","nofollow"),k(mn,"class","keyword"),k(fn,"class","keyword"),k(U,"href","https://doc.rust-lang.org/book/ch01-01-installation.html"),k(U,"target","_blank"),k(Y,"class","disclaimer"),k(K,"class","language-bash"),k(V,"class","keyword"),k(Q,"class","keyword"),k(J,"class","language-toml"),k(F,"class","language-rust"),k(X,"class","language-rust"),k(Z,"class","language-rust"),k($,"href","https://bevyengine.org/learn/book/getting-started/"),k($,"target","_blank"),k(nn,"href","https://godotengine.org/"),k(nn,"target","blank"),k(sn,"href","https://unity.com/"),k(sn,"target","_blank"),k(an,"href","https://www.yoyogames.com/en"),k(an,"target","_blank"),k(tn,"class","language-rust"),k(en,"class","language-rust"),k(pn,"class","language-rust"),k(on,"class","language-rust"),k(En,"class","keyword"),k(ln,"class","language-rust"),k(un,"class","language-rust"),k(kn,"href","https://github.com/DennisSmuda/run_bevy_tutorial"),k(kn,"target","_blank"),k(P,"class","disclaimer")},m(n,l){u(n,D,l),a(D,N),a(N,Ca),a(N,j),a(j,Pa),a(N,Oa),u(n,vs,l),u(n,y,l),a(y,q),a(q,Da),a(y,Ia),a(y,mn),a(mn,Aa),a(y,Ma),a(y,Mn),a(Mn,Ra),a(y,Ba),a(y,Rn),a(Rn,Ta),a(y,Ha),u(n,_s,l),u(n,I,l),a(I,xa),a(I,fn),a(fn,La),a(I,Wa),u(n,Es,l),u(n,Y,l),a(Y,z),a(z,Ga),a(z,U),a(U,Na),a(z,ja),u(n,bs,l),u(n,dn,l),a(dn,qa),u(n,gs,l),u(n,yn,l),a(yn,Ya),u(n,Ss,l),u(n,K,l),K.innerHTML=oo,u(n,Cs,l),u(n,V,l),a(V,za),u(n,Ps,l),u(n,wn,l),a(wn,Ua),u(n,Os,l),u(n,Q,l),a(Q,Ka),u(n,Ds,l),u(n,A,l),a(A,Va),a(A,Bn),a(Bn,Qa),a(A,Ja),u(n,Is,l),u(n,J,l),J.innerHTML=co,u(n,As,l),u(n,h,l),a(h,Fa),a(h,Tn),a(Tn,Xa),a(h,Za),a(h,Hn),a(Hn,$a),a(h,nt),u(n,Ms,l),u(n,M,l),a(M,st),a(M,xn),a(xn,at),a(M,tt),u(n,Rs,l),u(n,F,l),F.innerHTML=lo,u(n,Bs,l),u(n,R,l),a(R,et),a(R,Ln),a(Ln,pt),a(R,ot),u(n,Ts,l),u(n,hn,l),a(hn,ct),u(n,Hs,l),u(n,B,l),a(B,lt),a(B,Wn),a(Wn,ut),a(B,it),u(n,xs,l),u(n,X,l),X.innerHTML=uo,u(n,Ls,l),u(n,T,l),a(T,rt),a(T,Gn),a(Gn,kt),a(T,mt),u(n,Ws,l),u(n,Z,l),Z.innerHTML=io,u(n,Gs,l),u(n,v,l),a(v,ft),a(v,Nn),a(Nn,dt),a(v,yt),a(v,$),a($,wt),a(v,ht),u(n,Ns,l),u(n,vn,l),a(vn,vt),u(n,js,l),u(n,m,l),a(m,_t),a(m,jn),a(jn,Et),a(m,bt),a(m,nn),a(nn,gt),a(m,St),a(m,qn),a(qn,Ct),a(m,Pt),a(m,Yn),a(Yn,Ot),a(m,Dt),a(m,sn),a(sn,It),a(m,At),a(m,zn),a(zn,Mt),a(m,Rt),a(m,an),a(an,Bt),a(m,Tt),a(m,Un),a(Un,Ht),a(m,xt),u(n,qs,l),u(n,_,l),a(_,Lt),a(_,Kn),a(Kn,Wt),a(_,Gt),a(_,Vn),a(Vn,Nt),a(_,jt),u(n,Ys,l),u(n,tn,l),tn.innerHTML=ro,u(n,zs,l),u(n,E,l),a(E,qt),a(E,Qn),a(Qn,Yt),a(E,zt),a(E,Jn),a(Jn,Ut),a(E,Kt),u(n,Us,l),u(n,en,l),en.innerHTML=ko,u(n,Ks,l),u(n,b,l),a(b,Vt),a(b,Fn),a(Fn,Qt),a(b,Jt),a(b,Xn),a(Xn,Ft),a(b,Xt),u(n,Vs,l),u(n,pn,l),pn.innerHTML=mo,u(n,Qs,l),u(n,H,l),a(H,Zt),a(H,Zn),a(Zn,$t),a(H,ne),u(n,Js,l),u(n,x,l),a(x,se),a(x,$n),a($n,ae),a(x,te),u(n,Fs,l),u(n,on,l),on.innerHTML=fo,u(n,Xs,l),u(n,d,l),a(d,ee),a(d,ns),a(ns,pe),a(d,oe),a(d,ss),a(ss,ce),a(d,le),a(d,as),a(as,ue),a(d,ie),a(d,ts),a(ts,re),a(d,ke),a(d,es),a(es,me),a(d,fe),u(n,Zs,l),u(n,_n,l),a(_n,de),u(n,$s,l),u(n,L,l),a(L,ye),a(L,ps),a(ps,we),a(L,he),u(n,na,l),u(n,g,l),a(g,os),a(os,cs),a(cs,ve),a(g,_e),a(g,ls),a(ls,us),a(us,Ee),a(g,be),a(g,is),a(is,rs),a(rs,ge),u(n,sa,l),u(n,S,l),a(S,Se),a(S,En),a(En,Ce),a(S,Pe),a(S,ks),a(ks,Oe),a(S,De),u(n,aa,l),u(n,C,l),a(C,Ie),a(C,ms),a(ms,Ae),a(C,Me),a(C,fs),a(fs,Re),a(C,Be),u(n,ta,l),u(n,cn,l),a(cn,Te),a(cn,ds),a(ds,He),u(n,ea,l),u(n,ln,l),ln.innerHTML=yo,u(n,pa,l),u(n,W,l),a(W,xe),a(W,ys),a(ys,Le),a(W,We),u(n,oa,l),u(n,G,l),a(G,Ge),a(G,ws),a(ws,Ne),a(G,je),u(n,ca,l),u(n,un,l),un.innerHTML=wo,u(n,la,l),u(n,bn,l),a(bn,qe),u(n,ua,l),u(n,P,l),a(P,hs),a(hs,Ye),a(P,ze),a(P,rn),a(rn,Ue),a(rn,kn),a(kn,Ke),a(rn,Ve)},p:Je,i:Je,o:Je,d(n){n&&s(D),n&&s(vs),n&&s(y),n&&s(_s),n&&s(I),n&&s(Es),n&&s(Y),n&&s(bs),n&&s(dn),n&&s(gs),n&&s(yn),n&&s(Ss),n&&s(K),n&&s(Cs),n&&s(V),n&&s(Ps),n&&s(wn),n&&s(Os),n&&s(Q),n&&s(Ds),n&&s(A),n&&s(Is),n&&s(J),n&&s(As),n&&s(h),n&&s(Ms),n&&s(M),n&&s(Rs),n&&s(F),n&&s(Bs),n&&s(R),n&&s(Ts),n&&s(hn),n&&s(Hs),n&&s(B),n&&s(xs),n&&s(X),n&&s(Ls),n&&s(T),n&&s(Ws),n&&s(Z),n&&s(Gs),n&&s(v),n&&s(Ns),n&&s(vn),n&&s(js),n&&s(m),n&&s(qs),n&&s(_),n&&s(Ys),n&&s(tn),n&&s(zs),n&&s(E),n&&s(Us),n&&s(en),n&&s(Ks),n&&s(b),n&&s(Vs),n&&s(pn),n&&s(Qs),n&&s(H),n&&s(Js),n&&s(x),n&&s(Fs),n&&s(on),n&&s(Xs),n&&s(d),n&&s(Zs),n&&s(_n),n&&s($s),n&&s(L),n&&s(na),n&&s(g),n&&s(sa),n&&s(S),n&&s(aa),n&&s(C),n&&s(ta),n&&s(cn),n&&s(ea),n&&s(ln),n&&s(pa),n&&s(W),n&&s(oa),n&&s(G),n&&s(ca),n&&s(un),n&&s(la),n&&s(bn),n&&s(ua),n&&s(P)}}}const To={slug:"bevy-run-get-started",title:"Get started with Rust & Bevy \u{1F3AE}",description:"Getting started with the Bevy game engine. Build a small app with input handling and game states",createdAt:"Mar. 20, 2022",published:!0,tags:[{name:"gamedev",value:"gamedev"},{name:"rust",value:"rust"},{name:"bevy",value:"bevy"}]};class Ho extends Io{constructor(D){super(),Ao(this,D,null,Ro,Mo,{})}}export{Ho as default,To as metadata};
