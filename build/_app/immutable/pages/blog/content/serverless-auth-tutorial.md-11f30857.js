import{S as Gt,i as Ft,s as Xt,e as c,t,k as u,c as l,a as r,h as e,d as n,m as i,b as k,W as Kt,g as p,H as a,E as Ga}from"../../../chunks/index-2dbaace3.js";function Jt(qt){let w,En,rs,_n,gn,Os,G,U,Pn,F,In,Cn,Ts,d,jn,us,On,Tn,is,An,qn,ks,Sn,xn,As,W,St=`<code class="language-js"><span class="token comment">// api/auth/login.js</span>
<span class="token keyword">import</span> jwt <span class="token keyword">from</span> <span class="token string">'jsonwebtoken'</span>
<span class="token keyword">import</span> bcrypt <span class="token keyword">from</span> <span class="token string">'bcrypt'</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> connectToDatabase <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../utils/db'</span>
<span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">'../../models/User'</span>

<span class="token comment">/**
 * Login Function
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">await</span> <span class="token function">connectToDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> body <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">NO BODY!</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> body <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">await</span> <span class="token function">checkIfInputIsValid</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
		<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">email</span><span class="token operator">:</span> body<span class="token punctuation">.</span>email <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> res
				<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'User with that e-mail does not exist.'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">comparePassword</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>_id<span class="token punctuation">)</span>

		res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> token<span class="token punctuation">,</span> user <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> e<span class="token punctuation">.</span>message <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">checkIfInputIsValid</span><span class="token punctuation">(</span><span class="token parameter">eventBody</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>eventBody<span class="token punctuation">.</span>password <span class="token operator">&amp;&amp;</span> eventBody<span class="token punctuation">.</span>password<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
			<span class="token string">'Password error. Password needs to be longer than 8 characters.'</span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>eventBody<span class="token punctuation">.</span>email <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> eventBody<span class="token punctuation">.</span>email <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Email error. Email must have valid characters.'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">comparePassword</span><span class="token punctuation">(</span><span class="token parameter">eventPassword<span class="token punctuation">,</span> userPassword<span class="token punctuation">,</span> userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>eventPassword<span class="token punctuation">,</span> userPassword<span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'The credentials do not match.'</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token function">signToken</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">signToken</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">JWT_SECRET</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token number">86400</span> <span class="token comment">// expires in 24 hours</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> login</code>`,qs,b,Mn,X,Dn,Rn,Ss,K,Hn,xs,E,Un,_,Wn,Ln,Ms,y,Bn,ds,Nn,zn,fs,Vn,Yn,Ds,g,Gn,ws,Fn,Xn,Rs,P,Kn,I,Jn,Qn,Hs,J,Zn,Us,C,$n,ys,sa,na,Ws,L,xt=`<code class="language-json"><span class="token comment">// vercel.json</span>
<span class="token punctuation">&#123;</span>
	<span class="token property">"headers"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">&#123;</span>
			<span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"/api/(.*)"</span><span class="token punctuation">,</span>
			<span class="token property">"headers"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
				<span class="token punctuation">&#123;</span> <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"true"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
				<span class="token punctuation">&#123;</span>
					<span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span>
					<span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"GET,OPTIONS,PATCH,DELETE,POST,PUT"</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
				<span class="token punctuation">&#123;</span>
					<span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span>
					<span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version"</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">]</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,Ls,j,aa,ms,ta,ea,Bs,f,oa,hs,pa,ca,vs,la,ra,bs,ua,ia,Ns,B,Mt=`<code class="language-js"><span class="token comment">// middleware/basic</span>
<span class="token keyword">const</span> <span class="token function-variable function">basicMiddleware</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// for preflight OPTION requests</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> basicMiddleware</code>`,zs,O,ka,Es,da,fa,Vs,N,Dt=`<code class="language-js"><span class="token comment">// api/auth/login.js</span>
<span class="token comment">// ...</span>
<span class="token keyword">import</span> basicMiddleware <span class="token keyword">from</span> <span class="token string">'../../middleware/basic'</span>
<span class="token comment">// ...</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">basicMiddleware</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span></code>`,Ys,Q,wa,Gs,z,Rt=`<code class="language-js"><span class="token comment">// middleware/auth</span>
<span class="token keyword">const</span> <span class="token function-variable function">authMiddleware</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin <span class="token operator">||</span> <span class="token string">'*'</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Not Authenticated!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">isAuthenticated</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>
		<span class="token operator">!</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization <span class="token operator">||</span>
		req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Bearer '</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> authMiddleware</code>`,Fs,T,ya,_s,ma,ha,Xs,Z,va,Ks,m,ba,gs,Ea,_a,Ps,ga,Pa,Js,V,Ht=`<code class="language-js"><span class="token comment">// api/auth/register</span>
<span class="token keyword">const</span> <span class="token function-variable function">register</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">await</span> <span class="token function">connectToDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// Check for empty body</span>
	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> body <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req

	<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">await</span> <span class="token function">checkIfInputIsValid</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>

		<span class="token comment">// Check if an e-mail is already taken</span>
		<span class="token keyword">const</span> existingUser <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">email</span><span class="token operator">:</span> body<span class="token punctuation">.</span>email <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>existingUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">303</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'User exists already!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">// Create a new user with a hashed password</span>
		<span class="token keyword">const</span> hashedPass <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>password<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
		<span class="token keyword">const</span> newUser <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
			<span class="token literal-property property">username</span><span class="token operator">:</span> body<span class="token punctuation">.</span>username<span class="token punctuation">,</span>
			<span class="token literal-property property">email</span><span class="token operator">:</span> body<span class="token punctuation">.</span>email<span class="token punctuation">,</span>
			<span class="token literal-property property">password</span><span class="token operator">:</span> hashedPass
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

		<span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">signToken</span><span class="token punctuation">(</span>newUser<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
		<span class="token comment">// Send back user + token (optional - you may want to have a "double opt-in" flow)</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">user</span><span class="token operator">:</span> newUser<span class="token punctuation">,</span> token <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> e<span class="token punctuation">.</span>message <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Qs,A,Ia,q,Ca,ja,Zs,$,Oa,$s,ss,ns,Is,Ta,Aa,sn,S,qa,x,Sa,xa,nn,as,ts,Fa,an,h,Ma,Cs,Da,Ra,js,Ha,Ua,tn,Y,Ut='<code class="language-bash"><span class="token function">curl</span> -H <span class="token string">"Authorization: Bearer &lt;ACCESS_TOKEN>"</span> -X GET http://localhost:3000/api/users</code>',en,es,Wa,on,os,La,pn,v,Ba,cn,M,Na,D,za,Va;return{c(){w=c("p"),En=t("Welcome to "),rs=c("em"),_n=t("part two"),gn=t(" of my serverless api introduction, where we will tackle user login and registration."),Os=u(),G=c("blockquote"),U=c("p"),Pn=t("Check out "),F=c("a"),In=t("the first part"),Cn=t(" if you haven\u2019t - it contains all the setup for this article!"),Ts=u(),d=c("p"),jn=t("Let\u2019s start with the former and create "),us=c("code"),On=t("api/auth/login.js"),Tn=t(". Go ahead and also install "),is=c("code"),An=t("jsonwebtoken"),qn=t(" and "),ks=c("code"),Sn=t("bcrypt"),xn=t(" as npm dependencies."),As=u(),W=c("pre"),qs=u(),b=c("p"),Mn=t("Pretty straight forward, right? We check the request body to make sure the person trying to log in has actually provided credentials. We then use our Model from "),X=c("a"),Dn=t("the first part"),Rn=t(" to see, if there is a user with that email in our database. If that is the case, our API will return a signed token alongside the user object within the response."),Ss=u(),K=c("h2"),Hn=t("CORS detour"),xs=u(),E=c("p"),Un=t("something we have completely neglected are "),_=c("a"),Wn=t("CORS issues"),Ln=t("."),Ms=u(),y=c("p"),Bn=t("To put it simply, let\u2019s imagine we are going to have our API \u201Cserving endpoints\u201D from some domain like "),ds=c("code"),Nn=t("serverless-api.com"),zn=t(". But our client-application is running on "),fs=c("code"),Vn=t("client-for-api.com"),Yn=t(" - now if these two domains could just share resources (information) as they pleased, we would have huge security flaws!"),Ds=u(),g=c("p"),Gn=t("This is pretty much why Cross Origin Resource Sharing ("),ws=c("em"),Fn=t("CORS"),Xn=t(") exist - so that developers can specify which \u201Corigins\u201D should be able to have access."),Rs=u(),P=c("p"),Kn=t("I would still recommend checking out the "),I=c("a"),Jn=t("MDN article"),Qn=t(" on the topic, if you want to delve deep."),Hs=u(),J=c("h2"),Zn=t("Configuration and Middlewares"),Us=u(),C=c("p"),$n=t("Create a "),ys=c("code"),sa=t("verecel.json"),na=t(" file in the root of your project"),Ws=u(),L=c("pre"),Ls=u(),j=c("p"),aa=t("If you have done something similar before, you might have noticed we are missing (maybe the most important) header - "),ms=c("code"),ta=t("access-control-allow-origin"),ea=t(" - it\u2019s one of my favorites, because of how much time it has cost me historically \u{1F605}"),Bs=u(),f=c("p"),oa=t("You can go ahead and set this header to "),hs=c("code"),pa=t('"*"'),ca=t(" inside your vercel config file, but I like to set it explicitly with the requests origin. So let\u2019s create two files, "),vs=c("code"),la=t("middleware/basic"),ra=t(" and "),bs=c("code"),ua=t("middleware/auth"),ia=t("."),Ns=u(),B=c("pre"),zs=u(),O=c("p"),ka=t("Now we can modify our "),Es=c("code"),da=t("login.js"),fa=t(" file to use our new middlware"),Vs=u(),N=c("pre"),Ys=u(),Q=c("p"),wa=t("For authenticated requests, we will wrap the relevant routes inside our auth-middleware:"),Gs=u(),z=c("pre"),Fs=u(),T=c("p"),ya=t("Modify "),_s=c("code"),ma=t("api/users/index.js"),ha=t(" to use our new auth-middleware."),Xs=u(),Z=c("h2"),va=t("Registration"),Ks=u(),m=c("p"),ba=t("The part we have all been waiting for - "),gs=c("em"),Ea=t("user creation"),_a=t("! You will need to create "),Ps=c("code"),ga=t("api/auth/register"),Pa=t(":"),Js=u(),V=c("pre"),Qs=u(),A=c("p"),Ia=t("I ommitted some stuff for clarity, but you can checkout the "),q=c("a"),Ca=t("full version here"),ja=t("."),Zs=u(),$=c("p"),Oa=t("It starts off very similar to our login function, by checking the request body for valid input. We make sure the same e-mail hasn\u2019t been registered to another user and create a new one with a hashed password."),$s=u(),ss=c("blockquote"),ns=c("p"),Is=c("em"),Ta=t("Never"),Aa=t(" store plain user passwords in your database!"),sn=u(),S=c("p"),qa=t("If you have a API testing tool (like "),x=c("a"),Sa=t("insomnia"),xa=t(") you can now try to register your first user!"),nn=u(),as=c("p"),ts=c("img"),an=u(),h=c("p"),Ma=t("If you want to test protected routes you will have to take the "),Cs=c("code"),Da=t("token"),Ra=t(" you get from logging in, and put it inside the authorization header inside for your next requests - if you still want to use "),js=c("code"),Ha=t("curl"),Ua=t(", you can also do that:"),tn=u(),Y=c("pre"),en=u(),es=c("h2"),Wa=t("That\u2019s it!"),on=u(),os=c("p"),La=t("We now have a full working node.js serverless API! If you want to check out the code in full, because I missed something or you want to give me a star, go to the"),pn=u(),v=c("a"),Ba=t("repository"),cn=t(`.
`),M=c("p"),Na=t("If you are wondering (like me) if you could build a \u201Cwhole application\u201D with a serverless API, the answer is yes, and yes I did exactly that. I built a small backing-track/jam-along app which is basically an extended version of this tutorials API. It has some relationships within the models and a couple of aggregation functions. You can "),D=c("a"),za=t("check it out here"),Va=t("."),this.h()},l(s){w=l(s,"P",{});var o=r(w);En=e(o,"Welcome to "),rs=l(o,"EM",{});var Xa=r(rs);_n=e(Xa,"part two"),Xa.forEach(n),gn=e(o," of my serverless api introduction, where we will tackle user login and registration."),o.forEach(n),Os=i(s),G=l(s,"BLOCKQUOTE",{});var Ka=r(G);U=l(Ka,"P",{});var ln=r(U);Pn=e(ln,"Check out "),F=l(ln,"A",{href:!0});var Ja=r(F);In=e(Ja,"the first part"),Ja.forEach(n),Cn=e(ln," if you haven\u2019t - it contains all the setup for this article!"),ln.forEach(n),Ka.forEach(n),Ts=i(s),d=l(s,"P",{});var R=r(d);jn=e(R,"Let\u2019s start with the former and create "),us=l(R,"CODE",{});var Qa=r(us);On=e(Qa,"api/auth/login.js"),Qa.forEach(n),Tn=e(R,". Go ahead and also install "),is=l(R,"CODE",{});var Za=r(is);An=e(Za,"jsonwebtoken"),Za.forEach(n),qn=e(R," and "),ks=l(R,"CODE",{});var $a=r(ks);Sn=e($a,"bcrypt"),$a.forEach(n),xn=e(R," as npm dependencies."),R.forEach(n),As=i(s),W=l(s,"PRE",{class:!0});var Wt=r(W);Wt.forEach(n),qs=i(s),b=l(s,"P",{});var rn=r(b);Mn=e(rn,"Pretty straight forward, right? We check the request body to make sure the person trying to log in has actually provided credentials. We then use our Model from "),X=l(rn,"A",{href:!0});var st=r(X);Dn=e(st,"the first part"),st.forEach(n),Rn=e(rn," to see, if there is a user with that email in our database. If that is the case, our API will return a signed token alongside the user object within the response."),rn.forEach(n),Ss=i(s),K=l(s,"H2",{});var nt=r(K);Hn=e(nt,"CORS detour"),nt.forEach(n),xs=i(s),E=l(s,"P",{});var un=r(E);Un=e(un,"something we have completely neglected are "),_=l(un,"A",{href:!0,target:!0,rel:!0});var at=r(_);Wn=e(at,"CORS issues"),at.forEach(n),Ln=e(un,"."),un.forEach(n),Ms=i(s),y=l(s,"P",{});var ps=r(y);Bn=e(ps,"To put it simply, let\u2019s imagine we are going to have our API \u201Cserving endpoints\u201D from some domain like "),ds=l(ps,"CODE",{});var tt=r(ds);Nn=e(tt,"serverless-api.com"),tt.forEach(n),zn=e(ps,". But our client-application is running on "),fs=l(ps,"CODE",{});var et=r(fs);Vn=e(et,"client-for-api.com"),et.forEach(n),Yn=e(ps," - now if these two domains could just share resources (information) as they pleased, we would have huge security flaws!"),ps.forEach(n),Ds=i(s),g=l(s,"P",{});var kn=r(g);Gn=e(kn,"This is pretty much why Cross Origin Resource Sharing ("),ws=l(kn,"EM",{});var ot=r(ws);Fn=e(ot,"CORS"),ot.forEach(n),Xn=e(kn,") exist - so that developers can specify which \u201Corigins\u201D should be able to have access."),kn.forEach(n),Rs=i(s),P=l(s,"P",{});var dn=r(P);Kn=e(dn,"I would still recommend checking out the "),I=l(dn,"A",{href:!0,target:!0,rel:!0});var pt=r(I);Jn=e(pt,"MDN article"),pt.forEach(n),Qn=e(dn," on the topic, if you want to delve deep."),dn.forEach(n),Hs=i(s),J=l(s,"H2",{});var ct=r(J);Zn=e(ct,"Configuration and Middlewares"),ct.forEach(n),Us=i(s),C=l(s,"P",{});var fn=r(C);$n=e(fn,"Create a "),ys=l(fn,"CODE",{});var lt=r(ys);sa=e(lt,"verecel.json"),lt.forEach(n),na=e(fn," file in the root of your project"),fn.forEach(n),Ws=i(s),L=l(s,"PRE",{class:!0});var Lt=r(L);Lt.forEach(n),Ls=i(s),j=l(s,"P",{});var wn=r(j);aa=e(wn,"If you have done something similar before, you might have noticed we are missing (maybe the most important) header - "),ms=l(wn,"CODE",{});var rt=r(ms);ta=e(rt,"access-control-allow-origin"),rt.forEach(n),ea=e(wn," - it\u2019s one of my favorites, because of how much time it has cost me historically \u{1F605}"),wn.forEach(n),Bs=i(s),f=l(s,"P",{});var H=r(f);oa=e(H,"You can go ahead and set this header to "),hs=l(H,"CODE",{});var ut=r(hs);pa=e(ut,'"*"'),ut.forEach(n),ca=e(H," inside your vercel config file, but I like to set it explicitly with the requests origin. So let\u2019s create two files, "),vs=l(H,"CODE",{});var it=r(vs);la=e(it,"middleware/basic"),it.forEach(n),ra=e(H," and "),bs=l(H,"CODE",{});var kt=r(bs);ua=e(kt,"middleware/auth"),kt.forEach(n),ia=e(H,"."),H.forEach(n),Ns=i(s),B=l(s,"PRE",{class:!0});var Bt=r(B);Bt.forEach(n),zs=i(s),O=l(s,"P",{});var yn=r(O);ka=e(yn,"Now we can modify our "),Es=l(yn,"CODE",{});var dt=r(Es);da=e(dt,"login.js"),dt.forEach(n),fa=e(yn," file to use our new middlware"),yn.forEach(n),Vs=i(s),N=l(s,"PRE",{class:!0});var Nt=r(N);Nt.forEach(n),Ys=i(s),Q=l(s,"P",{});var ft=r(Q);wa=e(ft,"For authenticated requests, we will wrap the relevant routes inside our auth-middleware:"),ft.forEach(n),Gs=i(s),z=l(s,"PRE",{class:!0});var zt=r(z);zt.forEach(n),Fs=i(s),T=l(s,"P",{});var mn=r(T);ya=e(mn,"Modify "),_s=l(mn,"CODE",{});var wt=r(_s);ma=e(wt,"api/users/index.js"),wt.forEach(n),ha=e(mn," to use our new auth-middleware."),mn.forEach(n),Xs=i(s),Z=l(s,"H2",{});var yt=r(Z);va=e(yt,"Registration"),yt.forEach(n),Ks=i(s),m=l(s,"P",{});var cs=r(m);ba=e(cs,"The part we have all been waiting for - "),gs=l(cs,"EM",{});var mt=r(gs);Ea=e(mt,"user creation"),mt.forEach(n),_a=e(cs,"! You will need to create "),Ps=l(cs,"CODE",{});var ht=r(Ps);ga=e(ht,"api/auth/register"),ht.forEach(n),Pa=e(cs,":"),cs.forEach(n),Js=i(s),V=l(s,"PRE",{class:!0});var Vt=r(V);Vt.forEach(n),Qs=i(s),A=l(s,"P",{});var hn=r(A);Ia=e(hn,"I ommitted some stuff for clarity, but you can checkout the "),q=l(hn,"A",{href:!0,target:!0,rel:!0});var vt=r(q);Ca=e(vt,"full version here"),vt.forEach(n),ja=e(hn,"."),hn.forEach(n),Zs=i(s),$=l(s,"P",{});var bt=r($);Oa=e(bt,"It starts off very similar to our login function, by checking the request body for valid input. We make sure the same e-mail hasn\u2019t been registered to another user and create a new one with a hashed password."),bt.forEach(n),$s=i(s),ss=l(s,"BLOCKQUOTE",{});var Et=r(ss);ns=l(Et,"P",{});var Ya=r(ns);Is=l(Ya,"EM",{});var _t=r(Is);Ta=e(_t,"Never"),_t.forEach(n),Aa=e(Ya," store plain user passwords in your database!"),Ya.forEach(n),Et.forEach(n),sn=i(s),S=l(s,"P",{});var vn=r(S);qa=e(vn,"If you have a API testing tool (like "),x=l(vn,"A",{href:!0,target:!0,rel:!0});var gt=r(x);Sa=e(gt,"insomnia"),gt.forEach(n),xa=e(vn,") you can now try to register your first user!"),vn.forEach(n),nn=i(s),as=l(s,"P",{});var Pt=r(as);ts=l(Pt,"IMG",{src:!0,alt:!0}),Pt.forEach(n),an=i(s),h=l(s,"P",{});var ls=r(h);Ma=e(ls,"If you want to test protected routes you will have to take the "),Cs=l(ls,"CODE",{});var It=r(Cs);Da=e(It,"token"),It.forEach(n),Ra=e(ls," you get from logging in, and put it inside the authorization header inside for your next requests - if you still want to use "),js=l(ls,"CODE",{});var Ct=r(js);Ha=e(Ct,"curl"),Ct.forEach(n),Ua=e(ls,", you can also do that:"),ls.forEach(n),tn=i(s),Y=l(s,"PRE",{class:!0});var Yt=r(Y);Yt.forEach(n),en=i(s),es=l(s,"H2",{});var jt=r(es);Wa=e(jt,"That\u2019s it!"),jt.forEach(n),on=i(s),os=l(s,"P",{});var Ot=r(os);La=e(Ot,"We now have a full working node.js serverless API! If you want to check out the code in full, because I missed something or you want to give me a star, go to the"),Ot.forEach(n),pn=i(s),v=l(s,"A",{href:!0,target:!0,rel:!0});var Tt=r(v);Ba=e(Tt,"repository"),Tt.forEach(n),cn=e(s,`.
`),M=l(s,"P",{});var bn=r(M);Na=e(bn,"If you are wondering (like me) if you could build a \u201Cwhole application\u201D with a serverless API, the answer is yes, and yes I did exactly that. I built a small backing-track/jam-along app which is basically an extended version of this tutorials API. It has some relationships within the models and a couple of aggregation functions. You can "),D=l(bn,"A",{href:!0,target:!0,rel:!0});var At=r(D);za=e(At,"check it out here"),At.forEach(n),Va=e(bn,"."),bn.forEach(n),this.h()},h(){k(F,"href","/blog/serverless-api-tutorial"),k(W,"class","language-js"),k(X,"href","/blog/serverless-api-tutorial"),k(_,"href","https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"),k(_,"target","_blank"),k(_,"rel","nofollower noreferer"),k(I,"href","https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"),k(I,"target","_blank"),k(I,"rel","nofollower noreferer"),k(L,"class","language-json"),k(B,"class","language-js"),k(N,"class","language-js"),k(z,"class","language-js"),k(V,"class","language-js"),k(q,"href","https://github.com/DennisSmuda/serverless-sample-api/blob/master/api/auth/register.js"),k(q,"target","_blank"),k(q,"rel","nofollower noreferer"),k(x,"href","https://insomnia.rest/"),k(x,"target","_blank"),k(x,"rel","nofollower noreferer"),Kt(ts.src,Fa="/images/blog/insomnia_register.png")||k(ts,"src",Fa),k(ts,"alt","Vercel Environment Variables"),k(Y,"class","language-bash"),k(v,"href","https://github.com/DennisSmuda/serverless-sample-api"),k(v,"target","_blank"),k(v,"rel","nofollower noreferer"),k(D,"href","https://backytracky.com/"),k(D,"target","_blank"),k(D,"rel","nofollower noreferer")},m(s,o){p(s,w,o),a(w,En),a(w,rs),a(rs,_n),a(w,gn),p(s,Os,o),p(s,G,o),a(G,U),a(U,Pn),a(U,F),a(F,In),a(U,Cn),p(s,Ts,o),p(s,d,o),a(d,jn),a(d,us),a(us,On),a(d,Tn),a(d,is),a(is,An),a(d,qn),a(d,ks),a(ks,Sn),a(d,xn),p(s,As,o),p(s,W,o),W.innerHTML=St,p(s,qs,o),p(s,b,o),a(b,Mn),a(b,X),a(X,Dn),a(b,Rn),p(s,Ss,o),p(s,K,o),a(K,Hn),p(s,xs,o),p(s,E,o),a(E,Un),a(E,_),a(_,Wn),a(E,Ln),p(s,Ms,o),p(s,y,o),a(y,Bn),a(y,ds),a(ds,Nn),a(y,zn),a(y,fs),a(fs,Vn),a(y,Yn),p(s,Ds,o),p(s,g,o),a(g,Gn),a(g,ws),a(ws,Fn),a(g,Xn),p(s,Rs,o),p(s,P,o),a(P,Kn),a(P,I),a(I,Jn),a(P,Qn),p(s,Hs,o),p(s,J,o),a(J,Zn),p(s,Us,o),p(s,C,o),a(C,$n),a(C,ys),a(ys,sa),a(C,na),p(s,Ws,o),p(s,L,o),L.innerHTML=xt,p(s,Ls,o),p(s,j,o),a(j,aa),a(j,ms),a(ms,ta),a(j,ea),p(s,Bs,o),p(s,f,o),a(f,oa),a(f,hs),a(hs,pa),a(f,ca),a(f,vs),a(vs,la),a(f,ra),a(f,bs),a(bs,ua),a(f,ia),p(s,Ns,o),p(s,B,o),B.innerHTML=Mt,p(s,zs,o),p(s,O,o),a(O,ka),a(O,Es),a(Es,da),a(O,fa),p(s,Vs,o),p(s,N,o),N.innerHTML=Dt,p(s,Ys,o),p(s,Q,o),a(Q,wa),p(s,Gs,o),p(s,z,o),z.innerHTML=Rt,p(s,Fs,o),p(s,T,o),a(T,ya),a(T,_s),a(_s,ma),a(T,ha),p(s,Xs,o),p(s,Z,o),a(Z,va),p(s,Ks,o),p(s,m,o),a(m,ba),a(m,gs),a(gs,Ea),a(m,_a),a(m,Ps),a(Ps,ga),a(m,Pa),p(s,Js,o),p(s,V,o),V.innerHTML=Ht,p(s,Qs,o),p(s,A,o),a(A,Ia),a(A,q),a(q,Ca),a(A,ja),p(s,Zs,o),p(s,$,o),a($,Oa),p(s,$s,o),p(s,ss,o),a(ss,ns),a(ns,Is),a(Is,Ta),a(ns,Aa),p(s,sn,o),p(s,S,o),a(S,qa),a(S,x),a(x,Sa),a(S,xa),p(s,nn,o),p(s,as,o),a(as,ts),p(s,an,o),p(s,h,o),a(h,Ma),a(h,Cs),a(Cs,Da),a(h,Ra),a(h,js),a(js,Ha),a(h,Ua),p(s,tn,o),p(s,Y,o),Y.innerHTML=Ut,p(s,en,o),p(s,es,o),a(es,Wa),p(s,on,o),p(s,os,o),a(os,La),p(s,pn,o),p(s,v,o),a(v,Ba),p(s,cn,o),p(s,M,o),a(M,Na),a(M,D),a(D,za),a(M,Va)},p:Ga,i:Ga,o:Ga,d(s){s&&n(w),s&&n(Os),s&&n(G),s&&n(Ts),s&&n(d),s&&n(As),s&&n(W),s&&n(qs),s&&n(b),s&&n(Ss),s&&n(K),s&&n(xs),s&&n(E),s&&n(Ms),s&&n(y),s&&n(Ds),s&&n(g),s&&n(Rs),s&&n(P),s&&n(Hs),s&&n(J),s&&n(Us),s&&n(C),s&&n(Ws),s&&n(L),s&&n(Ls),s&&n(j),s&&n(Bs),s&&n(f),s&&n(Ns),s&&n(B),s&&n(zs),s&&n(O),s&&n(Vs),s&&n(N),s&&n(Ys),s&&n(Q),s&&n(Gs),s&&n(z),s&&n(Fs),s&&n(T),s&&n(Xs),s&&n(Z),s&&n(Ks),s&&n(m),s&&n(Js),s&&n(V),s&&n(Qs),s&&n(A),s&&n(Zs),s&&n($),s&&n($s),s&&n(ss),s&&n(sn),s&&n(S),s&&n(nn),s&&n(as),s&&n(an),s&&n(h),s&&n(tn),s&&n(Y),s&&n(en),s&&n(es),s&&n(on),s&&n(os),s&&n(pn),s&&n(v),s&&n(cn),s&&n(M)}}}const Zt={slug:"serverless-auth-tutorial",title:"Serverless authentication \u{1F511}",description:"How to build a serverless REST API with user authentication and mongoDB Part 2",createdAt:"Jul. 5, 2021",published:!0,tags:[{name:"node.js",value:"node"},{name:"serverless",value:"serverless"}]};class $t extends Gt{constructor(w){super(),Ft(this,w,null,Jt,Xt,{})}}export{$t as default,Zt as metadata};
